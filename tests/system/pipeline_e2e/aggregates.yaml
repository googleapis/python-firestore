tests:
  - description: "testAggregates - count"
    pipeline:
      - Collection: books
      - Aggregate:
        - AliasedExpression:
            - Function.count:
              - Field: rating
            - "count"
    assert_results:
      - count: 10
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - mapValue:
              fields:
                count:
                  functionValue:
                    name: count
                    args:
                    - fieldReferenceValue: rating
          - mapValue: {}
          name: aggregate
  - description: "testAggregates - count_if"
    pipeline:
      - Collection: books
      - Aggregate:
        - AliasedExpression:
            - Function.count_if:
              - Function.greater_than:
                - Field: rating
                - Constant: 4.2
            - "count_if_rating_gt_4_2"
    assert_results:
      - count_if_rating_gt_4_2: 5
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - mapValue:
              fields:
                count_if_rating_gt_4_2:
                  functionValue:
                    name: count_if
                    args:
                    - functionValue:
                        name: greater_than
                        args:
                        - fieldReferenceValue: rating
                        - doubleValue: 4.2
          - mapValue: {}
          name: aggregate
  - description: "testAggregates - count_distinct"
    pipeline:
      - Collection: books
      - Aggregate:
        - AliasedExpression:
            - Function.count_distinct:
              - Field: genre
            - "distinct_genres"
    assert_results:
      - distinct_genres: 8
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - mapValue:
              fields:
                distinct_genres:
                  functionValue:
                    name: count_distinct
                    args:
                    - fieldReferenceValue: genre
          - mapValue: {}
          name: aggregate
  - description: "testAggregates - avg, count, max"
    pipeline:
      - Collection: books
      - Where:
          - Function.equal:
              - Field: genre
              - Constant: Science Fiction
      - Aggregate:
        - AliasedExpression:
            - Function.count:
              - Field: rating
            - "count"
        - AliasedExpression:
            - Function.average:
              - Field: rating
            - "avg_rating"
        - AliasedExpression:
            - Function.maximum:
              - Field: rating
            - "max_rating"
    assert_results:
      - count: 2
        avg_rating: 4.4
        max_rating: 4.6
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: genre
              - stringValue: Science Fiction
              name: equal
          name: where
        - args:
          - mapValue:
              fields:
                avg_rating:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    name: average
                count:
                  functionValue:
                    name: count
                    args:
                    - fieldReferenceValue: rating
                max_rating:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    name: maximum
          - mapValue: {}
          name: aggregate
  - description: testGroupBysWithoutAccumulators
    pipeline:
      - Collection: books
      - Where:
        - Function.less_than:
          - Field: published
          - Constant: 1900
      - Aggregate:
          accumulators: []
          groups: [genre]
    assert_error: ".* requires at least one accumulator"
  - description: testGroupBysAndAggregate
    pipeline:
      - Collection: books
      - Where:
          - Function.less_than:
              - Field: published
              - Constant: 1984
      - Aggregate:
          accumulators:
            - AliasedExpression:
              - Function.average:
                - Field: rating
              - "avg_rating"
          groups: [genre]
      - Where:
          - Function.greater_than:
              - Field: avg_rating
              - Constant: 4.3
      - Sort:
          - Ordering:
            - Field: avg_rating
            - ASCENDING
    assert_results:
      - avg_rating: 4.4
        genre: Science Fiction
      - avg_rating: 4.5
        genre: Romance
      - avg_rating: 4.7
        genre: Fantasy
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: published
              - integerValue: '1984'
              name: less_than
          name: where
        - args:
          - mapValue:
              fields:
                avg_rating:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    name: average
          - mapValue:
              fields:
                genre:
                  fieldReferenceValue: genre
          name: aggregate
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: avg_rating
              - doubleValue: 4.3
              name: greater_than
          name: where
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: ascending
                expression:
                  fieldReferenceValue: avg_rating
          name: sort
  - description: testMinMax
    pipeline:
      - Collection: books
      - Aggregate:
          - AliasedExpression:
              - Function.count:
                - Field: rating
              - "count"
          - AliasedExpression:
              - Function.maximum:
                - Field: rating
              - "max_rating"
          - AliasedExpression:
              - Function.minimum:
                - Field: published
              - "min_published"
    assert_results:
      - count: 10
        max_rating: 4.7
        min_published: 1813
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - mapValue:
              fields:
                count:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    name: count
                max_rating:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    name: maximum
                min_published:
                  functionValue:
                    args:
                    - fieldReferenceValue: published
                    name: minimum
          - mapValue: {}
          name: aggregate
  - description: testSum
    pipeline:
      - Collection: books
      - Where:
          - Function.equal:
              - Field: genre
              - Constant: Science Fiction
      - Aggregate:
        - AliasedExpression:
            - Function.sum:
              - Field: rating
            - "total_rating"
    assert_results:
      - total_rating: 8.8

