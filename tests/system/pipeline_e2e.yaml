data:
  books:
    book1:
      title: "The Hitchhiker's Guide to the Galaxy"
      author: "Douglas Adams"
      genre: "Science Fiction"
      published: 1979
      rating: 4.2
      tags:
        - comedy
        - space
        - adventure
      awards:
        hugo: true
        nebula: false
    book2:
      title: "Pride and Prejudice"
      author: "Jane Austen"
      genre: "Romance"
      published: 1813
      rating: 4.5
      tags:
        - classic
        - social commentary
        - love
      awards:
        none: true
    book3:
      title: "One Hundred Years of Solitude"
      author: "Gabriel García Márquez"
      genre: "Magical Realism"
      published: 1967
      rating: 4.3
      tags:
        - family
        - history
        - fantasy
      awards:
        nobel: true
        nebula: false
    book4:
      title: "The Lord of the Rings"
      author: "J.R.R. Tolkien"
      genre: "Fantasy"
      published: 1954
      rating: 4.7
      tags:
        - adventure
        - magic
        - epic
      awards:
        hugo: false
        nebula: false
    book5:
      title: "The Handmaid's Tale"
      author: "Margaret Atwood"
      genre: "Dystopian"
      published: 1985
      rating: 4.1
      tags:
        - feminism
        - totalitarianism
        - resistance
      awards:
        arthur c. clarke: true
        booker prize: false
    book6:
      title: "Crime and Punishment"
      author: "Fyodor Dostoevsky"
      genre: "Psychological Thriller"
      published: 1866
      rating: 4.3
      tags:
        - philosophy
        - crime
        - redemption
      awards:
        none: true
    book7:
      title: "To Kill a Mockingbird"
      author: "Harper Lee"
      genre: "Southern Gothic"
      published: 1960
      rating: 4.2
      tags:
        - racism
        - injustice
        - coming-of-age
      awards:
        pulitzer: true
    book8:
      title: "1984"
      author: "George Orwell"
      genre: "Dystopian"
      published: 1949
      rating: 4.2
      tags:
        - surveillance
        - totalitarianism
        - propaganda
      awards:
        prometheus: true
    book9:
      title: "The Great Gatsby"
      author: "F. Scott Fitzgerald"
      genre: "Modernist"
      published: 1925
      rating: 4.0
      tags:
        - wealth
        - american dream
        - love
      awards:
        none: true
    book10:
      title: "Dune"
      author: "Frank Herbert"
      genre: "Science Fiction"
      published: 1965
      rating: 4.6
      tags:
        - politics
        - desert
        - ecology
      awards:
        hugo: true
        nebula: true
tests:
  - description: "testAggregates - count"
    pipeline:
      - Collection: books
      - Aggregate:
        - AliasedExpr:
            - Expr.count:
              - Field: rating
            - "count"
    assert_results:
      - count: 10
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - mapValue:
              fields:
                count:
                  functionValue:
                    name: count
                    args:
                    - fieldReferenceValue: rating
          - mapValue: {}
          name: aggregate
  - description: "testAggregates - avg, count, max"
    pipeline:
      - Collection: books
      - Where:
          - Expr.equal:
              - Field: genre
              - Constant: Science Fiction
      - Aggregate:
        - AliasedExpr:
            - Expr.count:
              - Field: rating
            - "count"
        - AliasedExpr:
            - Expr.average:
              - Field: rating
            - "avg_rating"
        - AliasedExpr:
            - Expr.maximum:
              - Field: rating
            - "max_rating"
    assert_results:
      - count: 2
        avg_rating: 4.4
        max_rating: 4.6
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: genre
              - stringValue: Science Fiction
              name: equal
          name: where
        - args:
          - mapValue:
              fields:
                avg_rating:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    name: average
                count:
                  functionValue:
                    name: count
                    args:
                    - fieldReferenceValue: rating
                max_rating:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    name: maximum
          - mapValue: {}
          name: aggregate
  - description: testGroupBysWithoutAccumulators
    pipeline:
      - Collection: books
      - Where:
        - Expr.less_than:
          - Field: published
          - Constant: 1900
      - Aggregate:
          accumulators: []
          groups: [genre]
    assert_error: ".* requires at least one accumulator"
  - description: testGroupBysAndAggregate
    pipeline:
      - Collection: books
      - Where:
          - Expr.less_than:
              - Field: published
              - Constant: 1984
      - Aggregate:
          accumulators:
            - AliasedExpr:
              - Expr.average:
                - Field: rating
              - "avg_rating"
          groups: [genre]
      - Where:
          - Expr.greater_than:
              - Field: avg_rating
              - Constant: 4.3
      - Sort:
          - Ordering:
            - Field: avg_rating
            - ASCENDING
    assert_results:
      - avg_rating: 4.4
        genre: Science Fiction
      - avg_rating: 4.5
        genre: Romance
      - avg_rating: 4.7
        genre: Fantasy
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: published
              - integerValue: '1984'
              name: less_than
          name: where
        - args:
          - mapValue:
              fields:
                avg_rating:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    name: average
          - mapValue:
              fields:
                genre:
                  fieldReferenceValue: genre
          name: aggregate
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: avg_rating
              - doubleValue: 4.3
              name: greater_than
          name: where
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: ascending
                expression:
                  fieldReferenceValue: avg_rating
          name: sort
  - description: testMinMax
    pipeline:
      - Collection: books
      - Aggregate:
          - AliasedExpr:
              - Expr.count:
                - Field: rating
              - "count"
          - AliasedExpr:
              - Expr.maximum:
                - Field: rating
              - "max_rating"
          - AliasedExpr:
              - Expr.minimum:
                - Field: published
              - "min_published"
    assert_results:
      - count: 10
        max_rating: 4.7
        min_published: 1813
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - mapValue:
              fields:
                count:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    name: count
                max_rating:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    name: maximum
                min_published:
                  functionValue:
                    args:
                    - fieldReferenceValue: published
                    name: minimum
          - mapValue: {}
          name: aggregate
  - description: selectSpecificFields
    pipeline:
      - Collection: books
      - Select:
          - title
          - author
      - Sort:
          - Ordering:
            - Field: author
            - ASCENDING
    assert_results:
      - title: "The Hitchhiker's Guide to the Galaxy"
        author: "Douglas Adams"
      - title: "The Great Gatsby"
        author: "F. Scott Fitzgerald"
      - title: "Dune"
        author: "Frank Herbert"
      - title: "Crime and Punishment"
        author: "Fyodor Dostoevsky"
      - title: "One Hundred Years of Solitude"
        author: "Gabriel García Márquez"
      - title: "1984"
        author: "George Orwell"
      - title: "To Kill a Mockingbird"
        author: "Harper Lee"
      - title: "The Lord of the Rings"
        author: "J.R.R. Tolkien"
      - title: "Pride and Prejudice"
        author: "Jane Austen"
      - title: "The Handmaid's Tale"
        author: "Margaret Atwood"
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - mapValue:
              fields:
                author:
                  fieldReferenceValue: author
                title:
                  fieldReferenceValue: title
          name: select
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: ascending
                expression:
                  fieldReferenceValue: author
          name: sort
  - description: addAndRemoveFields
    pipeline:
      - Collection: books
      - AddFields:
        - AliasedExpr:
            - Expr.string_concat:
                - Field: author
                - Constant: _
                - Field: title
            - "author_title"
        - AliasedExpr:
            - Expr.string_concat:
                - Field: title
                - Constant: _
                - Field: author
            - "title_author"
      - RemoveFields:
        - title_author
        - tags
        - awards
        - rating
        - title
        - Field: published
        - Field: genre
        - Field: nestedField # Field does not exist, should be ignored
      - Sort:
        - Ordering:
          - Field: author_title
          - ASCENDING
    assert_results:
      - author: Douglas Adams
        author_title: Douglas Adams_The Hitchhiker's Guide to the Galaxy
      - author: F. Scott Fitzgerald
        author_title: F. Scott Fitzgerald_The Great Gatsby
      - author: Frank Herbert
        author_title: Frank Herbert_Dune
      - author: Fyodor Dostoevsky
        author_title: Fyodor Dostoevsky_Crime and Punishment
      - author: Gabriel García Márquez
        author_title: Gabriel García Márquez_One Hundred Years of Solitude
      - author: George Orwell
        author_title: George Orwell_1984
      - author: Harper Lee
        author_title: Harper Lee_To Kill a Mockingbird
      - author: J.R.R. Tolkien
        author_title: J.R.R. Tolkien_The Lord of the Rings
      - author: Jane Austen
        author_title: Jane Austen_Pride and Prejudice
      - author: Margaret Atwood
        author_title: Margaret Atwood_The Handmaid's Tale
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - mapValue:
              fields:
                author_title:
                  functionValue:
                    args:
                    - fieldReferenceValue: author
                    - stringValue: _
                    - fieldReferenceValue: title
                    name: string_concat
                title_author:
                  functionValue:
                    args:
                    - fieldReferenceValue: title
                    - stringValue: _
                    - fieldReferenceValue: author
                    name: string_concat
          name: add_fields
        - args:
          - fieldReferenceValue: title_author
          - fieldReferenceValue: tags
          - fieldReferenceValue: awards
          - fieldReferenceValue: rating
          - fieldReferenceValue: title
          - fieldReferenceValue: published
          - fieldReferenceValue: genre
          - fieldReferenceValue: nestedField
          name: remove_fields
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: ascending
                expression:
                  fieldReferenceValue: author_title
          name: sort
  - description: whereByMultipleConditions
    pipeline:
      - Collection: books
      - Where:
          - And:
              - Expr.greater_than:
                  - Field: rating
                  - Constant: 4.5
              - Expr.equal:
                  - Field: genre
                  - Constant: Science Fiction
    assert_results:
      - title: Dune
        author: Frank Herbert
        genre: Science Fiction
        published: 1965
        rating: 4.6
        tags:
          - politics
          - desert
          - ecology
        awards:
          hugo: true
          nebula: true
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - functionValue:
                  args:
                  - fieldReferenceValue: rating
                  - doubleValue: 4.5
                  name: greater_than
              - functionValue:
                  args:
                  - fieldReferenceValue: genre
                  - stringValue: Science Fiction
                  name: equal
              name: and
          name: where
  - description: whereByOrCondition
    pipeline:
      - Collection: books
      - Where:
          - Or:
              - Expr.equal:
                  - Field: genre
                  - Constant: Romance
              - Expr.equal:
                  - Field: genre
                  - Constant: Dystopian
      - Select:
        - title
      - Sort:
          - Ordering:
            - Field: title
            - ASCENDING
    assert_results:
      - title: "1984"
      - title: Pride and Prejudice
      - title: The Handmaid's Tale
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - functionValue:
                  args:
                  - fieldReferenceValue: genre
                  - stringValue: Romance
                  name: equal
              - functionValue:
                  args:
                  - fieldReferenceValue: genre
                  - stringValue: Dystopian
                  name: equal
              name: or
          name: where
        - args:
          - mapValue:
              fields:
                title:
                  fieldReferenceValue: title
          name: select
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: ascending
                expression:
                  fieldReferenceValue: title
          name: sort
  - description: testPipelineWithOffsetAndLimit
    pipeline:
      - Collection: books
      - Sort:
          - Ordering:
            - Field: author
            - ASCENDING
      - Offset: 5
      - Limit: 3
      - Select:
        - title
        - author
    assert_results:
      - title: "1984"
        author: George Orwell
      - title: To Kill a Mockingbird
        author: Harper Lee
      - title: The Lord of the Rings
        author: J.R.R. Tolkien
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: ascending
                expression:
                  fieldReferenceValue: author
          name: sort
        - args:
          - integerValue: '5'
          name: offset
        - args:
          - integerValue: '3'
          name: limit
        - args:
          - mapValue:
              fields:
                author:
                  fieldReferenceValue: author
                title:
                  fieldReferenceValue: title
          name: select
  - description: testArrayContains
    pipeline:
      - Collection: books
      - Where:
          - Expr.array_contains:
              - Field: tags
              - Constant: comedy
    assert_results:
      - title: The Hitchhiker's Guide to the Galaxy
        author: Douglas Adams
        awards:
          hugo: true
          nebula: false
        genre: Science Fiction
        published: 1979
        rating: 4.2
        tags: ["comedy", "space", "adventure"]
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: tags
              - stringValue: comedy
              name: array_contains
          name: where
  - description: testArrayContainsAny
    pipeline:
      - Collection: books
      - Where:
          - Expr.array_contains_any:
            - Field: tags
            - - Constant: comedy
              - Constant: classic
      - Select:
        - title
      - Sort:
          - Ordering:
            - Field: title
            - ASCENDING
    assert_results:
      - title: Pride and Prejudice
      - title: The Hitchhiker's Guide to the Galaxy
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: tags
              - arrayValue:
                  values:
                  - stringValue: comedy
                  - stringValue: classic
              name: array_contains_any
          name: where
        - args:
          - mapValue:
              fields:
                title:
                  fieldReferenceValue: title
          name: select
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: ascending
                expression:
                  fieldReferenceValue: title
          name: sort
  - description: testArrayContainsAll
    pipeline:
      - Collection: books
      - Where:
          - Expr.array_contains_all:
              - Field: tags
              - - Constant: adventure
                - Constant: magic
      - Select:
        - title
    assert_results:
      - title: The Lord of the Rings
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: tags
              - arrayValue:
                  values:
                  - stringValue: adventure
                  - stringValue: magic
              name: array_contains_all
          name: where
        - args:
          - mapValue:
              fields:
                title:
                  fieldReferenceValue: title
          name: select
  - description: testArrayLength
    pipeline:
      - Collection: books
      - Select:
        - AliasedExpr:
            - Expr.array_length:
                - Field: tags
            - "tagsCount"
      - Where:
          - Expr.equal:
              - Field: tagsCount
              - Constant: 3
    assert_results: # All documents have 3 tags
      - tagsCount: 3
      - tagsCount: 3
      - tagsCount: 3
      - tagsCount: 3
      - tagsCount: 3
      - tagsCount: 3
      - tagsCount: 3
      - tagsCount: 3
      - tagsCount: 3
      - tagsCount: 3
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - mapValue:
              fields:
                tagsCount:
                  functionValue:
                    args:
                    - fieldReferenceValue: tags
                    name: array_length
          name: select
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: tagsCount
              - integerValue: '3'
              name: equal
          name: where
  - description: testStringConcat
    pipeline:
      - Collection: books
      - Sort:
          - Ordering:
            - Field: author
            - ASCENDING
      - Select:
          - AliasedExpr:
              - Expr.string_concat:
                  - Field: author
                  - Constant:  " - "
                  - Field: title
              - "bookInfo"
      - Limit: 1
    assert_results:
      - bookInfo: Douglas Adams - The Hitchhiker's Guide to the Galaxy
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: ascending
                expression:
                  fieldReferenceValue: author
          name: sort
        - args:
          - mapValue:
              fields:
                bookInfo:
                  functionValue:
                    args:
                    - fieldReferenceValue: author
                    - stringValue: ' - '
                    - fieldReferenceValue: title
                    name: string_concat
          name: select
        - args:
          - integerValue: '1'
          name: limit
  - description: testStartsWith
    pipeline:
      - Collection: books
      - Where:
          - Expr.starts_with:
              - Field: title
              - Constant: The
      - Select:
        - title
      - Sort:
        - Ordering:
            - Field: title
            - ASCENDING
    assert_results:
      - title: The Great Gatsby
      - title: The Handmaid's Tale
      - title: The Hitchhiker's Guide to the Galaxy
      - title: The Lord of the Rings
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: title
              - stringValue: The
              name: starts_with
          name: where
        - args:
          - mapValue:
              fields:
                title:
                  fieldReferenceValue: title
          name: select
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: ascending
                expression:
                  fieldReferenceValue: title
          name: sort
  - description: testEndsWith
    pipeline:
      - Collection: books
      - Where:
          - Expr.ends_with:
              - Field: title
              - Constant: y
      - Select:
        - title
      - Sort:
        - Ordering:
          - Field: title
          - DESCENDING
    assert_results:
      - title: The Hitchhiker's Guide to the Galaxy
      - title: The Great Gatsby
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: title
              - stringValue: y
              name: ends_with
          name: where
        - args:
          - mapValue:
              fields:
                title:
                  fieldReferenceValue: title
          name: select
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: descending
                expression:
                  fieldReferenceValue: title
          name: sort
  - description: testLength
    pipeline:
      - Collection: books
      - Select:
        - AliasedExpr:
            - Expr.char_length:
                - Field: title
            - "titleLength"
        - title
      - Where:
          - Expr.greater_than:
              - Field: titleLength
              - Constant: 20
      - Sort:
          - Ordering:
            - Field: title
            - ASCENDING
    assert_results:
      - titleLength: 29
        title: One Hundred Years of Solitude
      - titleLength: 36
        title: The Hitchhiker's Guide to the Galaxy
      - titleLength: 21
        title: The Lord of the Rings
      - titleLength: 21
        title: To Kill a Mockingbird
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - mapValue:
              fields:
                title:
                  fieldReferenceValue: title
                titleLength:
                  functionValue:
                    args:
                    - fieldReferenceValue: title
                    name: char_length
          name: select
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: titleLength
              - integerValue: '20'
              name: greater_than
          name: where
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: ascending
                expression:
                  fieldReferenceValue: title
          name: sort
  - description: testStringFunctions - CharLength
    pipeline:
      - Collection: books
      - Where:
          - Expr.equal:
              - Field: author
              - Constant: "Douglas Adams"
      - Select:
        - AliasedExpr:
            - Expr.char_length:
                - Field: title
            - "title_length"
    assert_results:
      - title_length: 36
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: author
              - stringValue: Douglas Adams
              name: equal
          name: where
        - args:
          - mapValue:
              fields:
                title_length:
                  functionValue:
                    args:
                    - fieldReferenceValue: title
                    name: char_length
          name: select
  - description: testStringFunctions - ByteLength
    pipeline:
      - Collection: books
      - Where:
          - Expr.equal:
              - Field: author
              - Constant: Douglas Adams
      - Select:
        - AliasedExpr:
            - Expr.byte_length:
                - Expr.string_concat:
                  - Field: title
                  - Constant: _银河系漫游指南
            - "title_byte_length"
    assert_results:
      - title_byte_length: 58
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: author
              - stringValue: Douglas Adams
              name: equal
          name: where
        - args:
          - mapValue:
              fields:
                title_byte_length:
                  functionValue:
                    args:
                    - functionValue:
                        args:
                        - fieldReferenceValue: title
                        - stringValue: "_\u94F6\u6CB3\u7CFB\u6F2B\u6E38\u6307\u5357"
                        name: string_concat
                    name: byte_length
          name: select
  - description: testLike
    pipeline:
      - Collection: books
      - Where:
          - Expr.like:
              - Field: title
              - Constant: "%Guide%"
      - Select:
        - title
    assert_results:
      - title: The Hitchhiker's Guide to the Galaxy
  - description: testRegexContains
    # Find titles that contain either "the" or "of" (case-insensitive)
    pipeline:
      - Collection: books
      - Where:
          - Expr.regex_contains:
              - Field: title
              - Constant: "(?i)(the|of)"
    assert_count: 5
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: title
              - stringValue: "(?i)(the|of)"
              name: regex_contains
          name: where
  - description: testRegexMatches
    # Find titles that contain either "the" or "of" (case-insensitive)
    pipeline:
      - Collection: books
      - Where:
          - Expr.regex_match:
              - Field: title
              - Constant: ".*(?i)(the|of).*"
    assert_count: 5
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: title
              - stringValue: ".*(?i)(the|of).*"
              name: regex_match
          name: where
  - description: testArithmeticOperations
    pipeline:
      - Collection: books
      - Where:
        - Expr.equal:
          - Field: title
          - Constant: To Kill a Mockingbird
      - Select:
        - AliasedExpr:
            - Expr.add:
                - Field: rating
                - Constant: 1
            - "ratingPlusOne"
        - AliasedExpr:
            - Expr.subtract:
                - Field: published
                - Constant: 1900
            - "yearsSince1900"
        - AliasedExpr:
            - Expr.multiply:
                - Field: rating
                - Constant: 10
            - "ratingTimesTen"
        - AliasedExpr:
            - Expr.divide:
                - Field: rating
                - Constant: 2
            - "ratingDividedByTwo"
        - AliasedExpr:
            - Expr.multiply:
                - Field: rating
                - Constant: 20
            - "ratingTimes20"
        - AliasedExpr:
            - Expr.add:
                - Field: rating
                - Constant: 3
            - "ratingPlus3"
        - AliasedExpr:
            - Expr.mod:
                - Field: rating
                - Constant: 2
            - "ratingMod2"
    assert_results:
      - ratingPlusOne: 5.2
        yearsSince1900: 60
        ratingTimesTen: 42.0
        ratingDividedByTwo: 2.1
        ratingTimes20: 84
        ratingPlus3: 7.2
        ratingMod2: 0.20000000000000018
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: title
              - stringValue: To Kill a Mockingbird
              name: equal
          name: where
        - args:
          - mapValue:
              fields:
                ratingDividedByTwo:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    - integerValue: '2'
                    name: divide
                ratingPlusOne:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    - integerValue: '1'
                    name: add
                ratingTimesTen:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    - integerValue: '10'
                    name: multiply
                yearsSince1900:
                  functionValue:
                    args:
                    - fieldReferenceValue: published
                    - integerValue: '1900'
                    name: subtract
                ratingTimes20:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    - integerValue: '20'
                    name: multiply
                ratingPlus3:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    - integerValue: '3'
                    name: add
                ratingMod2:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    - integerValue: '2'
                    name: mod
          name: select
  - description: testComparisonOperators
    pipeline:
      - Collection: books
      - Where:
          - And:
              - Expr.greater_than:
                  - Field: rating
                  - Constant: 4.2
              - Expr.less_than_or_equal:
                  - Field: rating
                  - Constant: 4.5
              - Expr.not_equal:
                  - Field: genre
                  - Constant: Science Fiction
      - Select:
        - rating
        - title
      - Sort:
        - Ordering:
          - title
          - ASCENDING
    assert_results:
      - rating: 4.3
        title: Crime and Punishment
      - rating: 4.3
        title: One Hundred Years of Solitude
      - rating: 4.5
        title: Pride and Prejudice
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - functionValue:
                  args:
                  - fieldReferenceValue: rating
                  - doubleValue: 4.2
                  name: greater_than
              - functionValue:
                  args:
                  - fieldReferenceValue: rating
                  - doubleValue: 4.5
                  name: less_than_or_equal
              - functionValue:
                  args:
                  - fieldReferenceValue: genre
                  - stringValue: Science Fiction
                  name: not_equal
              name: and
          name: where
        - args:
          - mapValue:
              fields:
                rating:
                  fieldReferenceValue: rating
                title:
                  fieldReferenceValue: title
          name: select
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: ascending
                expression:
                  fieldReferenceValue: title
          name: sort
  - description: testLogicalOperators
    pipeline:
      - Collection: books
      - Where:
          - Or:
              - And:
                  - Expr.greater_than:
                      - Field: rating
                      - Constant: 4.5
                  - Expr.equal:
                      - Field: genre
                      - Constant: Science Fiction
              - Expr.less_than:
                  - Field: published
                  - Constant: 1900
      - Select:
          - title
      - Sort:
        - Ordering:
          - Field: title
          - ASCENDING
    assert_results:
      - title: Crime and Punishment
      - title: Dune
      - title: Pride and Prejudice
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - functionValue:
                  args:
                  - functionValue:
                      args:
                      - fieldReferenceValue: rating
                      - doubleValue: 4.5
                      name: greater_than
                  - functionValue:
                      args:
                      - fieldReferenceValue: genre
                      - stringValue: Science Fiction
                      name: equal
                  name: and
              - functionValue:
                  args:
                  - fieldReferenceValue: published
                  - integerValue: '1900'
                  name: less_than
              name: or
          name: where
        - args:
          - mapValue:
              fields:
                title:
                  fieldReferenceValue: title
          name: select
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: ascending
                expression:
                  fieldReferenceValue: title
          name: sort
  - description: testChecks
    pipeline:
      - Collection: books
      - Where:
            - Not:
                - Expr.is_nan:
                  - Field: rating
      - Select:
          - AliasedExpr:
              - Not:
                  - Expr.is_nan:
                    - Field: rating
              - "ratingIsNotNaN"
      - Limit: 1
    assert_results:
      - ratingIsNotNaN: true
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - functionValue:
                  args:
                  - fieldReferenceValue: rating
                  name: is_nan
              name: not
          name: where
        - args:
          - mapValue:
              fields:
                ratingIsNotNaN:
                  functionValue:
                    args:
                    - functionValue:
                        args:
                        - fieldReferenceValue: rating
                        name: is_nan
                    name: not
          name: select
        - args:
          - integerValue: '1'
          name: limit
  - description: testLogicalMinMax
    pipeline:
      - Collection: books
      - Where:
          - Expr.equal:
              - Field: author
              - Constant: Douglas Adams
      - Select:
          - AliasedExpr:
              - Expr.logical_maximum:
                  - Field: rating
                  - Constant: 4.5
              - "max_rating"
          - AliasedExpr:
              - Expr.logical_minimum:
                  - Field: published
                  - Constant: 1900
              - "min_published"
    assert_results:
      - max_rating: 4.5
        min_published: 1900
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: author
              - stringValue: Douglas Adams
              name: equal
          name: where
        - args:
          - mapValue:
              fields:
                min_published:
                  functionValue:
                    args:
                    - fieldReferenceValue: published
                    - integerValue: '1900'
                    name: minimum
                max_rating:
                  functionValue:
                    args:
                    - fieldReferenceValue: rating
                    - doubleValue: 4.5
                    name: maximum
          name: select
  - description: testMapGet
    pipeline:
      - Collection: books
      - Sort:
        - Ordering:
          - Field: published
          - DESCENDING
      - Select:
          - AliasedExpr:
              - Expr.map_get:
                  - Field: awards
                  - hugo
              - "hugoAward"
          - Field: title
      - Where:
          - Expr.equal:
              - Field: hugoAward
              - Constant: true
    assert_results:
      - hugoAward: true
        title: The Hitchhiker's Guide to the Galaxy
      - hugoAward: true
        title: Dune
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: descending
                expression:
                  fieldReferenceValue: published
          name: sort
        - args:
          - mapValue:
              fields:
                hugoAward:
                  functionValue:
                    args:
                    - fieldReferenceValue: awards
                    - stringValue: hugo
                    name: map_get
                title:
                  fieldReferenceValue: title
          name: select
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: hugoAward
              - booleanValue: true
              name: equal
          name: where
  - description: testNestedFields
    pipeline:
      - Collection: books
      - Where:
          - Expr.equal:
              - Field: awards.hugo
              - Constant: true
      - Sort:
          - Ordering:
            - Field: title
            - DESCENDING
      - Select:
          - title
          - Field: awards.hugo
    assert_results:
      - title: The Hitchhiker's Guide to the Galaxy
        awards.hugo: true
      - title: Dune
        awards.hugo: true
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: awards.hugo
              - booleanValue: true
              name: equal
          name: where
        - args:
          - mapValue:
              fields:
                direction:
                  stringValue: descending
                expression:
                  fieldReferenceValue: title
          name: sort
        - args:
          - mapValue:
              fields:
                awards.hugo:
                  fieldReferenceValue: awards.hugo
                title:
                  fieldReferenceValue: title
          name: select
  - description: testSampleLimit
    pipeline:
      - Collection: books
      - Sample: 3
    assert_count: 3 # Results will vary due to randomness
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - integerValue: '3'
          - stringValue: documents
          name: sample
  - description: testSamplePercentage
    pipeline:
      - Collection: books
      - Sample:
          - SampleOptions:
            - 0.6
            - percent
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - doubleValue: 0.6
          - stringValue: percent
          name: sample
  - description: testUnion
    pipeline:
      - Collection: books
      - Union:
        - Pipeline:
          - Collection: books
    assert_count: 20 # Results will be duplicated
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - pipelineValue:
              stages:
              - args:
                - referenceValue: /books
                name: collection
          name: union
  - description: testUnnest
    pipeline:
      - Collection: books
      - Where:
        - Expr.equal:
          - Field: title
          - Constant: The Hitchhiker's Guide to the Galaxy
      - Unnest:
        - tags
        - tags_alias
      - Select: tags_alias
    assert_results:
      - tags_alias: comedy
      - tags_alias: space
      - tags_alias: adventure
    assert_proto:
      pipeline:
        stages:
        - args:
          - referenceValue: /books
          name: collection
        - args:
          - functionValue:
              args:
              - fieldReferenceValue: title
              - stringValue: The Hitchhiker's Guide to the Galaxy
              name: equal
          name: where
        - args:
          - fieldReferenceValue: tags
          - fieldReferenceValue: tags_alias
          name: unnest
        - args:
          - mapValue:
              fields:
                tags_alias:
                  fieldReferenceValue: tags_alias
          name: select
